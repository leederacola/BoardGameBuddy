Changes to be implemented.

BoardGameRepository currently holds both BoardGame objects and creates the array they are contained in.  
Current impplementation prevents diffrent user Libraries and Libraries that dont contain all BoardGame objects stored(hard coded).
-Separate _boardGames[] and BoardGame objects into 2 repositories.
-BoardGameRepository will hold all game objects (edit out array containers)
-Make New Repository LibraryRepository - this will hold BoardGame arrayLists that can be edited by calling to BoardGameRepository
	Functions
	Constructor - empty arrayList of BoardGames
	Constructor 2 (add all BoardGames from BoardGameRepository)
		void addGame(int Id) -  Adds game to List from using BoardGame.Id (easiest way for now, no need to fuck with string searches just yet)
		void removeGame(int Id) - removes desired BoardGame from List
		void clearLibrary()	- removes all BoardGame objects from arrayList
Save Library somehow?
separate, edit, test with constructor 2 to test new method of data storage.
Learn user input?
 		  


5/27
What I have so far......
	***	Views-	Home, Game Libiary, Detail
	***	Model-	BoardGame
	***	Controllers- HomeController
	*** Data- BoardGameRepository
			game data hard coded in repository
	*** This txt file

My understanding/explaination of the pieces in play.

Home controller handles all incomming request. 

Constructor() upon creation this creates a new BoardGameRepository

Action Methods- they do things
	ActionResult Index() - returns the Index View, located in Views/Home/Index
	ViewResult GameLibrary() - 
			creates var boardGames = from gameRepo.GetGames()
			var boardGames no has all boardgame
			boardgames is passed to  game library view.
			Game Library view loops each element in var bardGames and displays Title

	ActionResult Detail(int? id) - 
			-careats a var called BoardGame, calls GetBoardGame, passes piticular
			BoardGame to the Detail View creating dynamic Detail View based upon game link clicked?

Data - Repository
	
	Methods -
	Constructor - creates an array of BoardGame objects, hard coded.
		
		public BoardGame[] GetBoardGames()
				this returns _boardGames that was created upon construction.  
				
		public BoardGame GetBoardGame(int id)
				this
			
		
		Home controller constructs null _gameRepository ----> gameRepository constructor adds hard coded data into an array called _boardGames.

Model- BoardGame
	string GetTitle() - not actually useful now. redundent.




As of now Index.cshtml is our home page.

		